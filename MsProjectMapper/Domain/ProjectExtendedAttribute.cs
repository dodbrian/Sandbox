// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.2.97.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace MsProjectMapper
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Xml;
    using System.IO;
    using System.Text;
    using System.ComponentModel.DataAnnotations;
    using System.Collections.Generic;

    /// <summary>
    /// Each of the individual entries in the extended attributes definition collection. There are no limits to the number of children that may appear, but Project only understands Flag1-Flag10, etc. There must be at least one ExtendedAttribute in each ExtendedAttributes collection.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/project")]
    public partial class ProjectExtendedAttribute
    {
        private List<ProjectExtendedAttributeValue> _valueList;
        private static XmlSerializer _serializer;
        /// <summary>
        /// This corresponds to the PID of the custom field.
        /// </summary>
        public string FieldID { get; set; }
        /// <summary>
        /// The name of the custom field.
        /// </summary>
        public string FieldName { get; set; }
        /// <summary>
        /// The custom field type. Values are: 0=Cost, 1=Date, 2=Duration, 3=Finish, 4=Flag, 5=Number, 6=Start, 7=Text.
        /// </summary>
        [DefaultValue(typeof(ProjectExtendedAttributeCFType), nameof(ProjectExtendedAttributeCFType.Item0))]
        public ProjectExtendedAttributeCFType CFType { get; set; }
        /// <summary>
        /// The GUID of the custom field.
        /// </summary>
        [RequiredAttribute()]
        [RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        public Guid Guid { get; set; }
        public bool ShouldSerializeGuid() => Guid != Guid.Empty;
        /// <summary>
        /// Whether the extended attribute is associated with a task, a resource, or an assignment. Values are: 20=Task, 21=Resource, 22=Calendar, 23=Assignment.
        /// </summary>
        [DefaultValue(typeof(ProjectExtendedAttributeElemType), nameof(ProjectExtendedAttributeElemType.Item20))]
        public ProjectExtendedAttributeElemType ElemType { get; set; }
        /// <summary>
        /// The maximum number of values you can set in a picklist.
        /// </summary>
        [XmlElement(DataType = "integer")]
        public string MaxMultiValues { get; set; }
        /// <summary>
        /// Whether the custom field is user defined.
        /// </summary>
        [Range(0, 1)]
        [DefaultValue(0)]
        public int UserDef { get; set; }
        /// <summary>
        /// The alias of the custom field.
        /// </summary>
        [MaxLengthAttribute(50)]
        [StringLengthAttribute(50)]
        public string Alias { get; set; }
        /// <summary>
        /// The secondary PID of the custom field.
        /// </summary>
        public string SecondaryPID { get; set; }
        /// <summary>
        /// Whether automatic rolldown to assignments is enabled.
        /// </summary>
        [Range(0, 1)]
        [DefaultValue(0)]
        public int AutoRollDown { get; set; }
        /// <summary>
        /// The GUID of the default lookup table entry.
        /// </summary>
        public string DefaultGuid { get; set; }
        /// <summary>
        /// The GUID of the lookup table associated with the custom field.
        /// </summary>
        public string Ltuid { get; set; }
        /// <summary>
        /// The GUID of the secondary PID of the custom field.
        /// </summary>
        [RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        public Guid SecondaryGuid { get; set; }
        public bool ShouldSerializeSecondaryGuid() => SecondaryGuid != Guid.Empty;
        /// <summary>
        /// The phonetic pronunciation of the alias of the custom field.
        /// </summary>
        [MaxLengthAttribute(50)]
        [StringLengthAttribute(50)]
        public string PhoneticAlias { get; set; }
        /// <summary>
        /// The way rollups are calculated. Values are: 0=Maximum (OR for flag fields), 1=Minimum (AND for flag fields), 2=Count all, 3=Sum, 4=Average, 5=Average First Sublevel, 6=Count First Sublevel, 7=Count Nonsummaries.
        /// </summary>
        [DefaultValue(typeof(ProjectExtendedAttributeRollupType), nameof(ProjectExtendedAttributeRollupType.Item0))]
        public ProjectExtendedAttributeRollupType RollupType { get; set; }
        /// <summary>
        /// Whether rollups are calculated for task and group summary rows. Values are: 0=None, 1=Rollup, 2=Calculation.
        /// </summary>
        [DefaultValue(typeof(ProjectExtendedAttributeCalculationType), nameof(ProjectExtendedAttributeCalculationType.Item0))]
        public ProjectExtendedAttributeCalculationType CalculationType { get; set; }
        /// <summary>
        /// The formula that Microsoft Project uses to populate the custom task field.
        /// </summary>
        public string Formula { get; set; }
        /// <summary>
        /// Whether only values in the list are allowed in the file.
        /// </summary>
        [Range(0, 1)]
        [DefaultValue(0)]
        public int RestrictValues { get; set; }
        /// <summary>
        /// The way value lists are sorted. Values are: 0=Descending, 1=Ascending.
        /// </summary>
        [DefaultValue(typeof(ProjectExtendedAttributeValuelistSortOrder), nameof(ProjectExtendedAttributeValuelistSortOrder.Item0))]
        public ProjectExtendedAttributeValuelistSortOrder ValuelistSortOrder { get; set; }
        /// <summary>
        /// Whether new values added to the project are automatically added to the list.
        /// </summary>
        [Range(0, 1)]
        [DefaultValue(0)]
        public int AppendNewValues { get; set; }
        /// <summary>
        /// The default value in the list. Not present if no default is set.
        /// </summary>
        public string Default { get; set; }

        /// <summary>
        /// When values of extended attributes are specified as properties of elements in the schema, they may either be specified by values or by references to the values contained in this list. Applications may assume ordering of the list by ordering specified here.
        /// </summary>
        [XmlArrayItemAttribute("Value", IsNullable = false)]
        public List<ProjectExtendedAttributeValue> ValueList
        {
            get
            {
                if ((_valueList == null))
                {
                    _valueList = new List<ProjectExtendedAttributeValue>();
                }
                return _valueList;
            }
            set
            {
                _valueList = value;
            }
        }

        private static XmlSerializer SerializerXML
        {
            get
            {
                if ((_serializer == null))
                {
                    _serializer = new XmlSerializerFactory().CreateSerializer(typeof(ProjectExtendedAttribute));
                }
                return _serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize ProjectExtendedAttribute object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXML.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes ProjectExtendedAttribute object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProjectExtendedAttribute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ProjectExtendedAttribute obj, out Exception exception)
        {
            exception = null;
            obj = default(ProjectExtendedAttribute);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ProjectExtendedAttribute obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ProjectExtendedAttribute Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ProjectExtendedAttribute)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ProjectExtendedAttribute Deserialize(Stream s)
        {
            return ((ProjectExtendedAttribute)(SerializerXML.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ProjectExtendedAttribute object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ProjectExtendedAttribute object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProjectExtendedAttribute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ProjectExtendedAttribute obj, out Exception exception)
        {
            exception = null;
            obj = default(ProjectExtendedAttribute);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ProjectExtendedAttribute obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ProjectExtendedAttribute LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
