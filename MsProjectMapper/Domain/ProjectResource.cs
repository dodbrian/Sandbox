// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.2.97.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace MsProjectMapper
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Xml;
    using System.IO;
    using System.Text;
    using System.ComponentModel.DataAnnotations;
    using System.Collections.Generic;

    /// <summary>
    /// There must be at least one resource in each Resources collection.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/project")]
    public partial class ProjectResource
    {
        private List<ProjectResourceExtendedAttribute> _extendedAttribute;
        private List<ProjectResourceBaseline> _baseline;
        private List<ProjectResourceOutlineCode> _outlineCode;
        private List<ProjectResourceAvailabilityPeriod> _availabilityPeriods;
        private List<ProjectResourceRate> _rates;
        private List<TimephasedDataType> _timephasedData;
        private static XmlSerializer _serializer;
        /// <summary>
        /// The unique identifier of the resource.
        /// </summary>
        public int UID { get; set; }
        /// <summary>
        /// The unique GUID of the resource.
        /// </summary>
        [RequiredAttribute()]
        [RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        public Guid GUID { get; set; }
        public bool ShouldSerializeGUID() => GUID != Guid.Empty;
        /// <summary>
        /// The position identifier of the resource within the list of resources.
        /// </summary>
        public int ID { get; set; }
        /// <summary>
        /// The name of the resource.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string Name { get; set; }
        /// <summary>
        /// The type of resource. Values are: 0=Material, 1=Work.
        /// </summary>
        public ProjectResourceType Type { get; set; }
        /// <summary>
        /// Whether the resource is null.
        /// </summary>
        [Range(0, 1)]
        public int IsNull { get; set; }
        /// <summary>
        /// The initials of the resource.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string Initials { get; set; }
        /// <summary>
        /// The phonetic spelling of the resource name. For use with Japanese only.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string Phonetics { get; set; }
        /// <summary>
        /// The NT account associated with the resource.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string NTAccount { get; set; }
        /// <summary>
        /// The unit of measure for the material resource.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string MaterialLabel { get; set; }
        /// <summary>
        /// The code or other information about the resource.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string Code { get; set; }
        /// <summary>
        /// The group to which the resource belongs.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string Group { get; set; }
        /// <summary>
        /// The type of workgroup to which the resource belongs. Values are: 0=Default, 1=None, 2=Email, 3=Web.
        /// </summary>
        public ProjectResourceWorkGroup WorkGroup { get; set; }
        /// <summary>
        /// The email address of the resource.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string EmailAddress { get; set; }
        /// <summary>
        /// The title of the hyperlink associated with the resource.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string Hyperlink { get; set; }
        /// <summary>
        /// The hyperlink associated with the resource.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string HyperlinkAddress { get; set; }
        /// <summary>
        /// The document bookmark of the hyperlink associated with the resource.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string HyperlinkSubAddress { get; set; }
        /// <summary>
        /// The maximum number of units that the resource is available.
        /// </summary>
        [DefaultValue(typeof(float), "1")]
        public float MaxUnits { get; set; }
        /// <summary>
        /// The largest number of units assigned to the resource at any time.
        /// </summary>
        public float PeakUnits { get; set; }
        /// <summary>
        /// Whether the resource is overallocated.
        /// </summary>
        [Range(0, 1)]
        public int OverAllocated { get; set; }
        /// <summary>
        /// The first date that the resource is available.
        /// </summary>
        [DefaultValue(typeof(DateTime), "")]
        public System.DateTime AvailableFrom { get; set; }
        /// <summary>
        /// The last date the resource is available.
        /// </summary>
        [DefaultValue(typeof(DateTime), "")]
        public System.DateTime AvailableTo { get; set; }
        /// <summary>
        /// The scheduled start date of the resource.
        /// </summary>
        [DefaultValue(typeof(DateTime), "")]
        public System.DateTime Start { get; set; }
        /// <summary>
        /// The scheduled finish date of the resource.
        /// </summary>
        [DefaultValue(typeof(DateTime), "")]
        public System.DateTime Finish { get; set; }
        /// <summary>
        /// Whether the resource can be leveled.
        /// </summary>
        [Range(0, 1)]
        public int CanLevel { get; set; }
        /// <summary>
        /// How cost is accrued against the resource. Values are: 1=Start, 2=End, 3=Prorated, $New4=Invalid.
        /// </summary>
        public ProjectResourceAccrueAt AccrueAt { get; set; }
        /// <summary>
        /// The total work assigned to the resource across all assigned tasks.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string Work { get; set; }
        /// <summary>
        /// The amount of non-overtime work assigned to the resource.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string RegularWork { get; set; }
        /// <summary>
        /// The amount of overtime work assigned to the resource.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string OvertimeWork { get; set; }
        /// <summary>
        /// The amount of actual work performed by the resource.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string ActualWork { get; set; }
        /// <summary>
        /// The amount of remaining work required to complete all assigned tasks.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string RemainingWork { get; set; }
        /// <summary>
        /// The amount of actual overtime work performed by the resource.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string ActualOvertimeWork { get; set; }
        /// <summary>
        /// The amount of remaining overtime work required to complete all tasks.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string RemainingOvertimeWork { get; set; }
        /// <summary>
        /// The percentage of work completed across all tasks.
        /// </summary>
        public int PercentWorkComplete { get; set; }
        /// <summary>
        /// The standard rate of the resource. This value is as of the current date if a rate table exists for the resource.
        /// </summary>
        public decimal StandardRate { get; set; }
        /// <summary>
        /// The units used by Microsoft Project to display the standard rate. 1=m, 2=h, 3=d, 4=w, 5=mo, 7=y, 8=material resource rate (or blank symbol specified).
        /// </summary>
        public ProjectResourceStandardRateFormat StandardRateFormat { get; set; }
        /// <summary>
        /// The total project cost for the resource across all assigned tasks.
        /// </summary>
        public decimal Cost { get; set; }
        /// <summary>
        /// The overtime rate of the resource. This value is as of the current date if a rate table exists for the resource.
        /// </summary>
        public decimal OvertimeRate { get; set; }
        /// <summary>
        /// The units used by Microsoft Project to display the overtime rate. 1=m, 2=h, 3=d, 4=w, 5=mo, 7=y.
        /// </summary>
        public ProjectResourceOvertimeRateFormat OvertimeRateFormat { get; set; }
        /// <summary>
        /// The total overtime cost for the resource including actual and remaining overtime costs.
        /// </summary>
        public decimal OvertimeCost { get; set; }
        /// <summary>
        /// The cost per use of the resource. This value is as of the current date if a rate table exists for the resource.
        /// </summary>
        public decimal CostPerUse { get; set; }
        /// <summary>
        /// The actual cost incurred by the resource across all assigned tasks.
        /// </summary>
        public decimal ActualCost { get; set; }
        /// <summary>
        /// The actual overtime cost incurred by the resource across all assigned tasks.
        /// </summary>
        public decimal ActualOvertimeCost { get; set; }
        /// <summary>
        /// The remaining projected cost of the resource to complete all assigned tasks.
        /// </summary>
        public decimal RemainingCost { get; set; }
        /// <summary>
        /// The remaining projected overtime cost of the resource to complete all assigned tasks.
        /// </summary>
        public decimal RemainingOvertimeCost { get; set; }
        /// <summary>
        /// The difference between the baseline work and the work as minutes x 1000.
        /// </summary>
        public float WorkVariance { get; set; }
        /// <summary>
        /// The difference between the baseline cost and the cost.
        /// </summary>
        public float CostVariance { get; set; }
        /// <summary>
        /// The earned value schedule variance, through the project status date.
        /// </summary>
        public float SV { get; set; }
        /// <summary>
        /// The earned value cost variance, through the project status date.
        /// </summary>
        public float CV { get; set; }
        /// <summary>
        /// The actual cost of the work performed by the resource for the project to-date.
        /// </summary>
        public float ACWP { get; set; }
        /// <summary>
        /// The resource calendar.Refers to a valid UID in the Calendars element of the Microsoft Project XML Schema.
        /// </summary>
        public int CalendarUID { get; set; }
        /// <summary>
        /// The text notes associated with the resource.
        /// </summary>
        public string Notes { get; set; }
        /// <summary>
        /// The budget cost of work scheduled for the resource.
        /// </summary>
        public float BCWS { get; set; }
        /// <summary>
        /// The budgeted cost of of the work performed by the resource for the project to-date.
        /// </summary>
        public float BCWP { get; set; }
        /// <summary>
        /// Whether the resource is generic.
        /// </summary>
        [Range(0, 1)]
        public int IsGeneric { get; set; }
        /// <summary>
        /// Whether the resource is set to inactive.
        /// </summary>
        [Range(0, 1)]
        public int IsInactive { get; set; }
        /// <summary>
        /// Whether the resource is an Enterprise resource.
        /// </summary>
        [Range(0, 1)]
        public int IsEnterprise { get; set; }
        /// <summary>
        /// The booking type of the resource. 1=Commited, 2=Proposed.
        /// </summary>
        public ProjectResourceBookingType BookingType { get; set; }
        /// <summary>
        /// The duration through which actual work is protected.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string ActualWorkProtected { get; set; }
        /// <summary>
        /// The duration through which actual overtime work is protected.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string ActualOvertimeWorkProtected { get; set; }
        /// <summary>
        /// The Active Directory GUID for the resource.
        /// </summary>
        [MaxLengthAttribute(16)]
        [StringLengthAttribute(16)]
        public string ActiveDirectoryGUID { get; set; }
        /// <summary>
        /// The date that the resource was created.
        /// </summary>
        public System.DateTime CreationDate { get; set; }
        /// <summary>
        /// Whether the resource is a cost resource.
        /// </summary>
        [Range(0, 1)]
        public int IsCostResource { get; set; }
        /// <summary>
        /// The name of the assignment owner.
        /// </summary>
        public string AssnOwner { get; set; }
        /// <summary>
        /// The GUID of the assignment owner.
        /// </summary>
        public string AssnOwnerGuid { get; set; }
        /// <summary>
        /// Whether the resource is a budget resource.
        /// </summary>
        [Range(0, 1)]
        public int IsBudget { get; set; }

        /// <summary>
        /// ProjectResource class constructor
        /// </summary>
        public ProjectResource()
        {
            MaxUnits = ((float)(1F));
        }

        /// <summary>
        /// The value of an extended attribute. Two pieces of data are necessary - a pointer back to the extended attribute table which is specified either by the unique ID or the Field ID, and the value which is specified either with the value, or a pointer back to the value list.
        /// </summary>
        [XmlElement("ExtendedAttribute")]
        public List<ProjectResourceExtendedAttribute> ExtendedAttribute
        {
            get
            {
                if ((_extendedAttribute == null))
                {
                    _extendedAttribute = new List<ProjectResourceExtendedAttribute>();
                }
                return _extendedAttribute;
            }
            set
            {
                _extendedAttribute = value;
            }
        }

        /// <summary>
        /// The baseline values for the resources.
        /// </summary>
        [XmlElement("Baseline")]
        public List<ProjectResourceBaseline> Baseline
        {
            get
            {
                if ((_baseline == null))
                {
                    _baseline = new List<ProjectResourceBaseline>();
                }
                return _baseline;
            }
            set
            {
                _baseline = value;
            }
        }

        /// <summary>
        /// The value of an outline code. Two pieces of data are necessary - a pointer to the outline code table that is specified by the FieldID, and the value that is specified either by the ValueID or ValueGUID pointer to the value list.
        /// </summary>
        [XmlElement("OutlineCode")]
        public List<ProjectResourceOutlineCode> OutlineCode
        {
            get
            {
                if ((_outlineCode == null))
                {
                    _outlineCode = new List<ProjectResourceOutlineCode>();
                }
                return _outlineCode;
            }
            set
            {
                _outlineCode = value;
            }
        }

        /// <summary>
        /// The collection of periods during which the resource is available.
        /// </summary>
        [XmlArrayItemAttribute("AvailabilityPeriod", IsNullable = false)]
        public List<ProjectResourceAvailabilityPeriod> AvailabilityPeriods
        {
            get
            {
                if ((_availabilityPeriods == null))
                {
                    _availabilityPeriods = new List<ProjectResourceAvailabilityPeriod>();
                }
                return _availabilityPeriods;
            }
            set
            {
                _availabilityPeriods = value;
            }
        }

        /// <summary>
        /// The collection of periods and the rates associated with each one.
        /// </summary>
        [XmlArrayItemAttribute("Rate", IsNullable = false)]
        public List<ProjectResourceRate> Rates
        {
            get
            {
                if ((_rates == null))
                {
                    _rates = new List<ProjectResourceRate>();
                }
                return _rates;
            }
            set
            {
                _rates = value;
            }
        }

        /// <summary>
        /// The time phased data.
        /// </summary>
        [XmlElement("TimephasedData")]
        public List<TimephasedDataType> TimephasedData
        {
            get
            {
                if ((_timephasedData == null))
                {
                    _timephasedData = new List<TimephasedDataType>();
                }
                return _timephasedData;
            }
            set
            {
                _timephasedData = value;
            }
        }

        private static XmlSerializer SerializerXML
        {
            get
            {
                if ((_serializer == null))
                {
                    _serializer = new XmlSerializerFactory().CreateSerializer(typeof(ProjectResource));
                }
                return _serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize ProjectResource object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXML.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes ProjectResource object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProjectResource object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ProjectResource obj, out Exception exception)
        {
            exception = null;
            obj = default(ProjectResource);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ProjectResource obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ProjectResource Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ProjectResource)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ProjectResource Deserialize(Stream s)
        {
            return ((ProjectResource)(SerializerXML.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ProjectResource object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ProjectResource object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProjectResource object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ProjectResource obj, out Exception exception)
        {
            exception = null;
            obj = default(ProjectResource);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ProjectResource obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ProjectResource LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
