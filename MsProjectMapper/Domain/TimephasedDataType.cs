// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.2.97.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace MsProjectMapper
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

/// <summary>
/// The definition of the time phased data block.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DebuggerStepThrough]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="http://schemas.microsoft.com/project")]
public partial class TimephasedDataType
{
    private static XmlSerializer _serializer;
    /// <summary>
    /// The type of task timephased data. Values are:
    /// 1=Assignment Remaining Work
    /// 2=Assignment Actual Work
    /// 3=Assignment Actual Overtime Work
    /// 4=Assignment Baseline Work
    /// 5=Assignment Baseline Cost
    /// 6=Assignment Actual Cost
    /// 7=Resource Baseline Work
    /// 8=Resource Baseline Cost
    /// 9=Task Baseline Work
    /// 10=Task Baseline Cost
    /// 11=Task Percent Complete
    /// 16=Assignment Baseline 1 Work
    /// 17=Assignment Baseline 1 Cost
    /// 18=Task Baseline 1 Work
    /// 19=Task Baseline 1 Cost
    /// 20=Resource Baseline 1 Work
    /// 21=Resource Baseline 1 Cost
    /// 22=Assignment Baseline 2 Work
    /// 23=Assignment Baseline 2 Cost
    /// 24=Task Baseline 2 Work
    /// 25=Task Baseline 2 Cost
    /// 26=Resource Baseline 2 Work
    /// 27=Resource Baseline 2 Cost
    /// 28=Assignment Baseline 3 Work
    /// 29=Assignment Baseline 3 Cost
    /// 30=Task Baseline 3 Work
    /// 31=Task Baseline 3 Cost
    /// 32=Resource Baseline 3 Work
    /// 33=Resource Baseline 3 Cost
    /// 34=Assignment Baseline 4 Work
    /// 35=Assignment Baseline 4 Cost
    /// 36=Task Baseline 4 Work
    /// 37=Task Baseline 4 Cost
    /// 38=Resource Baseline 4 Work
    /// 39=Resource Baseline 4 Cost
    /// 40=Assignment Baseline 5 Work
    /// 41=Assignment Baseline 5 Cost
    /// 42=Task Baseline 5 Work
    /// 43=Task Baseline 5 Cost
    /// 44=Resource Baseline 5 Work
    /// 45=Resource Baseline 5 Cost
    /// 46=Assignment Baseline 6 Work
    /// 47=Assignment Baseline 6 Cost
    /// 48=Task Baseline 6 Work
    /// 49=Task Baseline 6 Cost
    /// 50=Resource Baseline 6 Work
    /// 51=Resource Baseline 6 Cost
    /// 52=Assignment Baseline 7 Work
    /// 53=Assignment Baseline 7 Cost
    /// 54=Task Baseline 7 Work
    /// 55=Task Baseline 7 Cost
    /// 56=Resource Baseline 7 Work
    /// 57=Resource Baseline 7 Cost
    /// 58=Assignment Baseline 8 Work
    /// 59=Assignment Baseline 8 Cost
    /// 60=Task Baseline 8 Work
    /// 61=Task Baseline 8 Cost
    /// 62=Resource Baseline 8 Work
    /// 63=Resource Baseline 8 Cost
    /// 64=Assignment Baseline 9 Work
    /// 65=Assignment Baseline 9 Cost
    /// 66=Task Baseline 9 Work
    /// 67=Task Baseline 9 Cost
    /// 68=Resource Baseline 9 Work
    /// 69=Resource Baseline 9 Cost
    /// 70=Assignment Baseline 10 Work
    /// 71=Assignment Baseline 10 Cost
    /// 72=Task Baseline 10 Work
    /// 73=Task Baseline 10 Cost
    /// 74=Resource Baseline 10 Work
    /// 75=Resource Baseline 10 Cost
    /// 76=Physical Percent Complete
    /// </summary>
        public TimephasedDataTypeType Type { get; set; }
    /// <summary>
    /// The unique identifier of the timephased data record.
    /// </summary>
        [XmlElement(DataType="integer")]
        public string UID { get; set; }
    /// <summary>
    /// The start date of the timephased data period.
    /// </summary>
        public System.DateTime Start { get; set; }
    /// <summary>
    /// The finish date of the timephased data period.
    /// </summary>
        public System.DateTime Finish { get; set; }
    /// <summary>
    /// The time unit of the timephased data period. Values are: 0=m, 1=h, 2=d, 3=w, 5=mo, 8=y.
    /// </summary>
        public TimephasedDataTypeUnit Unit { get; set; }
    /// <summary>
    /// The value per unit of time for the timephased data period.
    /// </summary>
        public string Value { get; set; }

    private static XmlSerializer SerializerXML
    {
        get
        {
            if ((_serializer == null))
            {
                _serializer = new XmlSerializerFactory().CreateSerializer(typeof(TimephasedDataType));
            }
            return _serializer;
        }
    }

    #region Serialize/Deserialize
    /// <summary>
    /// Serialize TimephasedDataType object
    /// </summary>
    /// <returns>XML value</returns>
    public virtual string Serialize()
    {
        StreamReader streamReader = null;
        MemoryStream memoryStream = null;
        try
        {
            memoryStream = new MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            SerializerXML.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }

    /// <summary>
    /// Deserializes TimephasedDataType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output TimephasedDataType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out TimephasedDataType obj, out Exception exception)
    {
        exception = null;
        obj = default(TimephasedDataType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }

    public static bool Deserialize(string input, out TimephasedDataType obj)
    {
        Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }

    public static TimephasedDataType Deserialize(string input)
    {
        StringReader stringReader = null;
        try
        {
            stringReader = new StringReader(input);
            return ((TimephasedDataType)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }

    public static TimephasedDataType Deserialize(Stream s)
    {
        return ((TimephasedDataType)(SerializerXML.Deserialize(s)));
    }
    #endregion

    /// <summary>
    /// Serializes current TimephasedDataType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (Exception e)
        {
            exception = e;
            return false;
        }
    }

    public virtual void SaveToFile(string fileName)
    {
        StreamWriter streamWriter = null;
        try
        {
            string dataString = Serialize();
            FileInfo outputFile = new FileInfo(fileName);
            streamWriter = outputFile.CreateText();
            streamWriter.WriteLine(dataString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }

    /// <summary>
    /// Deserializes xml markup from file into an TimephasedDataType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output TimephasedDataType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out TimephasedDataType obj, out Exception exception)
    {
        exception = null;
        obj = default(TimephasedDataType);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }

    public static bool LoadFromFile(string fileName, out TimephasedDataType obj)
    {
        Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }

    public static TimephasedDataType LoadFromFile(string fileName)
    {
        FileStream file = null;
        StreamReader sr = null;
        try
        {
            file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new StreamReader(file);
            string dataString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(dataString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
