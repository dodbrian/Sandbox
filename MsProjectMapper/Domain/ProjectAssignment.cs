// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.2.97.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace MsProjectMapper
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Xml;
    using System.IO;
    using System.Text;
    using System.ComponentModel.DataAnnotations;
    using System.Collections.Generic;

    /// <summary>
    /// The project element is the top level element of the document.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/project")]
    public partial class ProjectAssignment
    {
        private List<ProjectAssignmentExtendedAttribute> _extendedAttribute;
        private List<ProjectAssignmentBaseline> _baseline;
        private List<TimephasedDataType> _timephasedData;
        private static XmlSerializer _serializer;
        /// <summary>
        /// The unique identifier of the calendar.
        /// </summary>
        public int UID { get; set; }
        /// <summary>
        /// The unique GUID of the assignment.
        /// </summary>
        [RequiredAttribute()]
        [RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        public Guid GUID { get; set; }
        public bool ShouldSerializeGUID() => GUID != Guid.Empty;
        /// <summary>
        /// The unique identifier of the task.
        /// </summary>
        public int TaskUID { get; set; }
        /// <summary>
        /// The unique identifier of the resource.
        /// </summary>
        public int ResourceUID { get; set; }
        /// <summary>
        /// The percentage of the task work completed.
        /// </summary>
        public int PercentWorkComplete { get; set; }
        /// <summary>
        /// The actual cost of the task.
        /// </summary>
        public decimal ActualCost { get; set; }
        /// <summary>
        /// The actual finish date of the task.
        /// </summary>
        [DefaultValue(typeof(DateTime), "")]
        public System.DateTime ActualFinish { get; set; }
        /// <summary>
        /// The actual overtime cost of the task.
        /// </summary>
        public decimal ActualOvertimeCost { get; set; }
        /// <summary>
        /// The actual overtime work for the task.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string ActualOvertimeWork { get; set; }
        /// <summary>
        /// The actual start date of the task.
        /// </summary>
        [DefaultValue(typeof(DateTime), "")]
        public System.DateTime ActualStart { get; set; }
        /// <summary>
        /// The actual work for the task.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string ActualWork { get; set; }
        /// <summary>
        /// The actual cost of work performed on the task to-date.
        /// </summary>
        public float ACWP { get; set; }
        /// <summary>
        /// Whether the Resource has accepted all of his or her assignments.
        /// </summary>
        [Range(0, 1)]
        public int Confirmed { get; set; }
        /// <summary>
        /// The projected or scheduled cost of the task.
        /// </summary>
        public decimal Cost { get; set; }
        /// <summary>
        /// The cost rate table used for the assignment.
        /// </summary>
        public ProjectAssignmentCostRateTable CostRateTable { get; set; }
        /// <summary>
        /// The time unit for the usage rate of the material resource assignment, for example resource m1[5lbs/hr]. The time units are NONE=0, SECONDS=1, MINUTES=2, HOURS=3, DAYS=4, WEEKS=5, MONTHS=6.
        /// </summary>
        public int RateScale { get; set; }
        /// <summary>
        /// The difference between the baseline cost and the cost.
        /// </summary>
        public float CostVariance { get; set; }
        /// <summary>
        /// The earned value cost variance.
        /// </summary>
        public float CV { get; set; }
        /// <summary>
        /// The amount that the assignment is delayed.
        /// </summary>
        public int Delay { get; set; }
        /// <summary>
        /// The scheduled finish date of the task.
        /// </summary>
        [DefaultValue(typeof(DateTime), "")]
        public System.DateTime Finish { get; set; }
        /// <summary>
        /// The variance of the task finish date from the baseline finish date as minutes x 1000.
        /// </summary>
        public int FinishVariance { get; set; }
        /// <summary>
        /// The title of the hyperlink associated with the task.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string Hyperlink { get; set; }
        /// <summary>
        /// The hyperlink associated with the task.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string HyperlinkAddress { get; set; }
        /// <summary>
        /// The document bookmark of the hyperlink associated with the task.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string HyperlinkSubAddress { get; set; }
        /// <summary>
        /// The variance of task work from the baseline task work as minutes x 1000.
        /// </summary>
        public float WorkVariance { get; set; }
        /// <summary>
        /// Whether the Units are Fixed Rate.
        /// </summary>
        [Range(0, 1)]
        public int HasFixedRateUnits { get; set; }
        /// <summary>
        /// Whether the consumption of the assigned material resource occurs in a single, fixed amount.
        /// </summary>
        [Range(0, 1)]
        public int FixedMaterial { get; set; }
        /// <summary>
        /// The delay caused by leveling the task.
        /// </summary>
        public int LevelingDelay { get; set; }
        /// <summary>
        /// The format for expressing the duration of the delay. Values are: 3=m, 4=em, 5=h, 6=eh, 7=d, 8=ed, 9=w, 10=ew, 11=mo, 12=emo, 19=%, 20=e%, 21=null, 35=m?, 36=em?, 37=h?, 38=eh?, 39=d?, 40=ed?, 41=w?, 42=ew?, 43=mo?, 44=emo?, 51=%?, 52=e%? and 53=null.
        /// </summary>
        public ProjectAssignmentLevelingDelayFormat LevelingDelayFormat { get; set; }
        /// <summary>
        /// Whether the Project is linked to another OLE object.
        /// </summary>
        [Range(0, 1)]
        public int LinkedFields { get; set; }
        /// <summary>
        /// Whether the task is a milestone.
        /// </summary>
        [Range(0, 1)]
        public int Milestone { get; set; }
        /// <summary>
        /// The text notes associated with the task.
        /// </summary>
        public string Notes { get; set; }
        /// <summary>
        /// Whether the assignment is overallocated.
        /// </summary>
        [Range(0, 1)]
        public int Overallocated { get; set; }
        /// <summary>
        /// The sum of the actual and remaining overtime cost of the task.
        /// </summary>
        public decimal OvertimeCost { get; set; }
        /// <summary>
        /// The amount of overtime work scheduled for the task.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string OvertimeWork { get; set; }
        /// <summary>
        /// The largest number of units assigned to the resource at any time.
        /// </summary>
        public float PeakUnits { get; set; }
        /// <summary>
        /// The amount of non-overtime work scheduled for the task.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string RegularWork { get; set; }
        /// <summary>
        /// The remaining projected cost of completing the task.
        /// </summary>
        public decimal RemainingCost { get; set; }
        /// <summary>
        /// The remaining overtime cost projected to finish the task.
        /// </summary>
        public decimal RemainingOvertimeCost { get; set; }
        /// <summary>
        /// The remaining overtime work scheduled to finish the task.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string RemainingOvertimeWork { get; set; }
        /// <summary>
        /// The remaining work scheduled to complete the task.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string RemainingWork { get; set; }
        /// <summary>
        /// Whether a response has been received for a TeamAssign message.
        /// </summary>
        [Range(0, 1)]
        public int ResponsePending { get; set; }
        /// <summary>
        /// The scheduled start date of the task.
        /// </summary>
        [DefaultValue(typeof(DateTime), "")]
        public System.DateTime Start { get; set; }
        /// <summary>
        /// The date that the task was stopped.
        /// </summary>
        [DefaultValue(typeof(DateTime), "")]
        public System.DateTime Stop { get; set; }
        /// <summary>
        /// The date that the task resumed.
        /// </summary>
        [DefaultValue(typeof(DateTime), "")]
        public System.DateTime Resume { get; set; }
        /// <summary>
        /// The variance of the task start date from the baseline start date as minutes x 1000.
        /// </summary>
        public int StartVariance { get; set; }
        /// <summary>
        /// Whether the task is a summary task.
        /// </summary>
        [Range(0, 1)]
        public int Summary { get; set; }
        /// <summary>
        /// The earned value schedule variance, through the project status date.
        /// </summary>
        public float SV { get; set; }
        /// <summary>
        /// The number of units for the assignment.
        /// </summary>
        public float Units { get; set; }
        /// <summary>
        /// Whether the resource assigned to a task needs to be updated as to the status of the task.
        /// </summary>
        [Range(0, 1)]
        public int UpdateNeeded { get; set; }
        /// <summary>
        /// The difference between basline cost and total cost.
        /// </summary>
        public float VAC { get; set; }
        /// <summary>
        /// The amount of scheduled work for the task.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string Work { get; set; }
        /// <summary>
        /// The work contour of the assignment. Values are: 0=Flat, 1=Back Loaded, 2=Front Loaded, 3=Double Peak, 4=Early Peak, 5=Late Peak, 6=Bell, 7=Turtle, 8=Contoured.
        /// </summary>
        public ProjectAssignmentWorkContour WorkContour { get; set; }
        /// <summary>
        /// The budgeted cost of work scheduled for the task.
        /// </summary>
        public float BCWS { get; set; }
        /// <summary>
        /// The budgeted cost of work performed on the task to-date.
        /// </summary>
        public float BCWP { get; set; }
        /// <summary>
        /// The booking type of the resource. 1=Commited, 2=Proposed.
        /// </summary>
        public ProjectAssignmentBookingType BookingType { get; set; }
        /// <summary>
        /// The duration through which actual work is protected.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string ActualWorkProtected { get; set; }
        /// <summary>
        /// The duration through which actual overtime work is protected.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string ActualOvertimeWorkProtected { get; set; }
        /// <summary>
        /// The date that the project was created.
        /// </summary>
        [DefaultValue(typeof(DateTime), "")]
        public System.DateTime CreationDate { get; set; }
        /// <summary>
        /// The name of the assignment owner.
        /// </summary>
        public string AssnOwner { get; set; }
        /// <summary>
        /// The GUID of the assignment owner.
        /// </summary>
        public string AssnOwnerGuid { get; set; }
        /// <summary>
        /// The budgeted amount for cost resources on this assignment.
        /// </summary>
        public decimal BudgetCost { get; set; }
        /// <summary>
        /// The budgeted work amount for work or material resources on this assignment.
        /// </summary>
        [XmlElement(DataType = "duration")]
        public string BudgetWork { get; set; }
        public object f404000 { get; set; }
        public object f404001 { get; set; }
        public object f404002 { get; set; }
        public object f404003 { get; set; }
        public object f404004 { get; set; }
        public object f404005 { get; set; }
        public object f404006 { get; set; }
        public object f404007 { get; set; }
        public object f404008 { get; set; }
        public object f404009 { get; set; }
        public object f40400a { get; set; }
        public object f40400b { get; set; }
        public object f40400c { get; set; }
        public object f40400d { get; set; }
        public object f40400e { get; set; }
        public object f40400f { get; set; }
        public object f404010 { get; set; }
        public object f404011 { get; set; }
        public object f404012 { get; set; }
        public object f404013 { get; set; }
        public object f404014 { get; set; }
        public object f404015 { get; set; }
        public object f404016 { get; set; }
        public object f404017 { get; set; }
        public object f404018 { get; set; }
        public object f404019 { get; set; }
        public object f40401a { get; set; }
        public object f40401b { get; set; }
        public object f40401c { get; set; }
        public object f40401d { get; set; }
        public object f40401e { get; set; }
        public object f40401f { get; set; }
        public object f404020 { get; set; }
        public object f404021 { get; set; }
        public object f404022 { get; set; }
        public object f404023 { get; set; }
        public object f404024 { get; set; }
        public object f404025 { get; set; }
        public object f404026 { get; set; }
        public object f404027 { get; set; }
        public object f404028 { get; set; }
        public object f404029 { get; set; }
        public object f40402a { get; set; }
        public object f40402b { get; set; }
        public object f40402c { get; set; }
        public object f40402d { get; set; }
        public object f40402e { get; set; }
        public object f40402f { get; set; }
        public object f404030 { get; set; }
        public object f404031 { get; set; }
        public object f404032 { get; set; }
        public object f404033 { get; set; }
        public object f404034 { get; set; }
        public object f404035 { get; set; }
        public object f404036 { get; set; }
        public object f404037 { get; set; }
        public object f404038 { get; set; }
        public object f404039 { get; set; }
        public object f40403a { get; set; }
        public object f40403b { get; set; }
        public object f40403c { get; set; }
        public object f40403d { get; set; }
        public object f40403e { get; set; }
        public object f40403f { get; set; }
        public object f404040 { get; set; }
        public object f404041 { get; set; }
        public object f404042 { get; set; }
        public object f404043 { get; set; }
        public object f404044 { get; set; }
        public object f404045 { get; set; }
        public object f404046 { get; set; }
        public object f404047 { get; set; }
        public object f404048 { get; set; }
        public object f404049 { get; set; }
        public object f40404a { get; set; }
        public object f40404b { get; set; }
        public object f40404c { get; set; }
        public object f40404d { get; set; }
        public object f40404e { get; set; }
        public object f40404f { get; set; }
        public object f404050 { get; set; }
        public object f404051 { get; set; }
        public object f404052 { get; set; }
        public object f404053 { get; set; }
        public object f404054 { get; set; }
        public object f404055 { get; set; }
        public object f404056 { get; set; }
        public object f404057 { get; set; }
        public object f404058 { get; set; }
        public object f404059 { get; set; }
        public object f40405a { get; set; }
        public object f40405b { get; set; }
        public object f40405c { get; set; }
        public object f40405d { get; set; }
        public object f40405e { get; set; }
        public object f40405f { get; set; }
        public object f404060 { get; set; }
        public object f404061 { get; set; }
        public object f404062 { get; set; }
        public object f404063 { get; set; }
        public object f404064 { get; set; }
        public object f404065 { get; set; }
        public object f404066 { get; set; }
        public object f404067 { get; set; }
        public object f404068 { get; set; }
        public object f404069 { get; set; }
        public object f40406a { get; set; }
        public object f40406b { get; set; }
        public object f40406c { get; set; }
        public object f40406d { get; set; }
        public object f40406e { get; set; }
        public object f40406f { get; set; }
        public object f404070 { get; set; }
        public object f404071 { get; set; }
        public object f404072 { get; set; }
        public object f404073 { get; set; }
        public object f404074 { get; set; }
        public object f404075 { get; set; }
        public object f404076 { get; set; }
        public object f404077 { get; set; }
        public object f404078 { get; set; }
        public object f404079 { get; set; }
        public object f40407a { get; set; }
        public object f40407b { get; set; }
        public object f40407c { get; set; }
        public object f40407d { get; set; }
        public object f40407e { get; set; }
        public object f40407f { get; set; }
        public object f404080 { get; set; }
        public object f404081 { get; set; }
        public object f404082 { get; set; }
        public object f404083 { get; set; }
        public object f404084 { get; set; }
        public object f404085 { get; set; }
        public object f404086 { get; set; }
        public object f404087 { get; set; }
        public object f404088 { get; set; }
        public object f404089 { get; set; }
        public object f40408a { get; set; }
        public object f40408b { get; set; }
        public object f40408c { get; set; }
        public object f40408d { get; set; }
        public object f40408e { get; set; }
        public object f40408f { get; set; }
        public object f404090 { get; set; }
        public object f404091 { get; set; }
        public object f404092 { get; set; }
        public object f404093 { get; set; }
        public object f404094 { get; set; }
        public object f404095 { get; set; }
        public object f404096 { get; set; }
        public object f404097 { get; set; }
        public object f404098 { get; set; }
        public object f404099 { get; set; }
        public object f40409a { get; set; }
        public object f40409b { get; set; }
        public object f40409c { get; set; }
        public object f40409d { get; set; }
        public object f40409e { get; set; }
        public object f40409f { get; set; }
        public object f4040a0 { get; set; }
        public object f4040a1 { get; set; }
        public object f4040a2 { get; set; }
        public object f4040a3 { get; set; }
        public object f4040a4 { get; set; }
        public object f4040a5 { get; set; }
        public object f4040a6 { get; set; }
        public object f4040a7 { get; set; }
        public object f4040a8 { get; set; }
        public object f4040a9 { get; set; }
        public object f4040aa { get; set; }
        public object f4040ab { get; set; }
        public object f4040ac { get; set; }
        public object f4040ad { get; set; }
        public object f4040ae { get; set; }
        public object f4040af { get; set; }
        public object f4040b0 { get; set; }
        public object f4040b1 { get; set; }
        public object f4040b2 { get; set; }
        public object f4040b3 { get; set; }
        public object f4040b4 { get; set; }
        public object f4040b5 { get; set; }
        public object f4040b6 { get; set; }
        public object f4040b7 { get; set; }
        public object f4040b8 { get; set; }
        public object f4040b9 { get; set; }
        public object f4040ba { get; set; }
        public object f4040bb { get; set; }
        public object f4040bc { get; set; }
        public object f4040bd { get; set; }
        public object f4040be { get; set; }
        public object f4040bf { get; set; }
        public object f4040c0 { get; set; }
        public object f4040c1 { get; set; }
        public object f4040c2 { get; set; }
        public object f4040c3 { get; set; }
        public object f4040c4 { get; set; }
        public object f4040c5 { get; set; }
        public object f4040c6 { get; set; }
        public object f4040c7 { get; set; }
        public object f4040c8 { get; set; }

        /// <summary>
        /// Each of the individual entries in the extended attributes definition collection. There are no limits to the number of children that may appear, but Project only understands Flag1-Flag10, etc. There must be at least one ExtendedAttribute in each ExtendedAttributes collection.
        /// </summary>
        [XmlElement("ExtendedAttribute")]
        public List<ProjectAssignmentExtendedAttribute> ExtendedAttribute
        {
            get
            {
                if ((_extendedAttribute == null))
                {
                    _extendedAttribute = new List<ProjectAssignmentExtendedAttribute>();
                }
                return _extendedAttribute;
            }
            set
            {
                _extendedAttribute = value;
            }
        }

        /// <summary>
        /// The collection of baseline values of the task.
        /// </summary>
        [XmlElement("Baseline")]
        public List<ProjectAssignmentBaseline> Baseline
        {
            get
            {
                if ((_baseline == null))
                {
                    _baseline = new List<ProjectAssignmentBaseline>();
                }
                return _baseline;
            }
            set
            {
                _baseline = value;
            }
        }

        /// <summary>
        /// The time phased data block associated with the task.
        /// </summary>
        [XmlElement("TimephasedData")]
        public List<TimephasedDataType> TimephasedData
        {
            get
            {
                if ((_timephasedData == null))
                {
                    _timephasedData = new List<TimephasedDataType>();
                }
                return _timephasedData;
            }
            set
            {
                _timephasedData = value;
            }
        }

        private static XmlSerializer SerializerXML
        {
            get
            {
                if ((_serializer == null))
                {
                    _serializer = new XmlSerializerFactory().CreateSerializer(typeof(ProjectAssignment));
                }
                return _serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize ProjectAssignment object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXML.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes ProjectAssignment object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProjectAssignment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ProjectAssignment obj, out Exception exception)
        {
            exception = null;
            obj = default(ProjectAssignment);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ProjectAssignment obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ProjectAssignment Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((ProjectAssignment)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ProjectAssignment Deserialize(Stream s)
        {
            return ((ProjectAssignment)(SerializerXML.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ProjectAssignment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ProjectAssignment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProjectAssignment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ProjectAssignment obj, out Exception exception)
        {
            exception = null;
            obj = default(ProjectAssignment);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ProjectAssignment obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ProjectAssignment LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
