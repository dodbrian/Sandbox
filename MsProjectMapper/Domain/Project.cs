// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.2.97.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace MsProjectMapper
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.IO;
    using System.Runtime.Serialization;
    using System.Text;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;

    /// <summary>
    /// The project element is the top level element of the document.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [Serializable]
    [DebuggerStepThrough]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [XmlTypeAttribute(AnonymousType = true, Namespace = "http://schemas.microsoft.com/project")]
    [XmlRootAttribute(Namespace = "http://schemas.microsoft.com/project", IsNullable = false)]
    public partial class Project
    {
        private List<ProjectOutlineCode> _outlineCodes;
        private List<ProjectView> _views;
        private List<ProjectFilter> _filters;
        private List<ProjectGroup> _groups;
        private List<ProjectTable> _tables;
        private List<ProjectReport> _reports;
        private ProjectWBSMasks _wBSMasks;
        private List<ProjectExtendedAttribute> _extendedAttributes;
        private List<ProjectCalendar> _calendars;
        private List<ProjectTask> _tasks;
        private List<ProjectResource> _resources;
        private List<ProjectAssignment> _assignments;
        private List<ProjectBoardColumn> _boardColumns;
        private List<ProjectSprint> _sprints;
        private static XmlSerializer _serializer;
        /// <summary>
        /// The version of Microsoft Project from which the project was saved. Values are: 12=Project 2007, 14=Project 2010. Project 2013 saves the same XML version as Project 2010.
        /// </summary>
        public int SaveVersion { get; set; }
        /// <summary>
        /// The name of the project.
        /// </summary>
        [MaxLengthAttribute(255)]
        [StringLengthAttribute(255)]
        public string Name { get; set; }
        /// <summary>
        /// The unique ID of the project.
        /// </summary>
        [RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        public Guid GUID { get; set; }
        /// <summary>
        /// The title of the project.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string Title { get; set; }
        /// <summary>
        /// The subject of the project.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string Subject { get; set; }
        /// <summary>
        /// The category of the project.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string Category { get; set; }
        /// <summary>
        /// The company that owns the project.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string Company { get; set; }
        /// <summary>
        /// The manager of the project.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string Manager { get; set; }
        /// <summary>
        /// The author of the project.
        /// </summary>
        [MaxLengthAttribute(512)]
        [StringLengthAttribute(512)]
        public string Author { get; set; }
        /// <summary>
        /// The date that the project was created.
        /// </summary>
        public System.DateTime CreationDate { get; set; }
        /// <summary>
        /// The number of times a project has been saved.
        /// </summary>
        public int Revision { get; set; }
        /// <summary>
        /// The date that the project was last saved.
        /// </summary>
        public System.DateTime LastSaved { get; set; }
        /// <summary>
        /// Whether the project is schduled from the start date or finish date.
        /// </summary>
        // [DefaultValue(true)]
        [Range(0,1)]
        public int ScheduleFromStart { get; set; }
        /// <summary>
        /// The start date of the project. Required if ScheduleFromStart is true.
        /// </summary>
        public System.DateTime StartDate { get; set; }
        /// <summary>
        /// The finish date of the project. Required if ScheduleFromStart is false.
        /// </summary>
        public System.DateTime FinishDate { get; set; }
        /// <summary>
        /// The Fiscal Year starting month. Values are: 1=January, 2=February, 3=March, 4=April, 5=May, 6=June, 7=July, 8=August, 9=September, 10=October, 11=November, 12=December.
        /// </summary>
        public ProjectFYStartDate FYStartDate { get; set; }
        /// <summary>
        /// The number of days past its end date that a task can go before Microsoft Project marks that task as a critical task.
        /// </summary>
        public int CriticalSlackLimit { get; set; }
        /// <summary>
        /// The number of digits after the decimal symbol.
        /// </summary>
        public int CurrencyDigits { get; set; }
        /// <summary>
        /// The currency symbol used in the project.
        /// </summary>
        [MaxLengthAttribute(20)]
        [StringLengthAttribute(20)]
        public string CurrencySymbol { get; set; }
        /// <summary>
        /// The three letter currency character code as defined in ISO 4217. Valid values are: USD.
        /// </summary>
        [MaxLengthAttribute(3)]
        [StringLengthAttribute(3)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// The position of the currency symbol. Values are: 0=Before, 1=After, 2=Before With Space, 3=After with space.
        /// </summary>
        public ProjectCurrencySymbolPosition CurrencySymbolPosition { get; set; }
        /// <summary>
        /// The project calendar. Refers to a valid UID in the Calendars element of the Microsoft Project XML Schema.
        /// </summary>
        public int CalendarUID { get; set; }
        /// <summary>
        /// The default start time of new tasks.
        /// </summary>
        [XmlElement(DataType = "time")]
        public System.DateTime DefaultStartTime { get; set; }
        /// <summary>
        /// The default finish time of new tasks.
        /// </summary>
        [XmlElement(DataType = "time")]
        public System.DateTime DefaultFinishTime { get; set; }
        /// <summary>
        /// The number of minutes per day.
        /// </summary>
        public int MinutesPerDay { get; set; }
        /// <summary>
        /// The number of minutes per week.
        /// </summary>
        public int MinutesPerWeek { get; set; }
        /// <summary>
        /// The number of days per month.
        /// </summary>
        public int DaysPerMonth { get; set; }
        /// <summary>
        /// The default type of new tasks. Values are: 0=Fixed Units, 1=Fixed Duration, 2=Fixed Work.
        /// </summary>
        // [DefaultValue(ProjectDefaultTaskType.FixedDuration)]
        public ProjectDefaultTaskType DefaultTaskType { get; set; }
        /// <summary>
        /// The default from where fixed costs are accrued. Values are: 1=Start, 2=Prorated, 3=End.
        /// </summary>
        public ProjectDefaultFixedCostAccrual DefaultFixedCostAccrual { get; set; }
        /// <summary>
        /// The default standard rate for new resources.
        /// </summary>
        public float DefaultStandardRate { get; set; }
        /// <summary>
        /// The default overtime rate for new resources.
        /// </summary>
        public float DefaultOvertimeRate { get; set; }
        /// <summary>
        /// The format for expressing the bulk duration. Values are: 3=m, 4=em, 5=h, 6=eh, 7=d, 8=ed, 9=w, 10=ew, 11=mo, 12=emo, 19=%, 20=e%, 21=null, 35=m?, 36=em?, 37=h?, 38=eh?, 39=d?, 40=ed?, 41=w?, 42=ew?, 43=mo?, 44=emo?, 51=%?, 52=e%? and 53=null.
        /// </summary>
        public ProjectDurationFormat DurationFormat { get; set; }
        /// <summary>
        /// The default work unit format. Values are: 1=m, 2=h, 3=d, 4=w, 5=mo.
        /// </summary>
        public ProjectWorkFormat WorkFormat { get; set; }
        /// <summary>
        /// Whether or not actual costs are editable.
        /// </summary>
        // [DefaultValue(false)]
        [Range(0,1)]
        public int EditableActualCosts { get; set; }
        /// <summary>
        /// Whether tasks honour their constraint dates.
        /// </summary>
        // [DefaultValue(true)]
        [Range(0,1)]
        public int HonorConstraints { get; set; }
        /// <summary>
        /// The default method for calculating earned value. Values are: 0=Percent Complete, 1=Physical Percent Complete.
        /// </summary>
        public ProjectEarnedValueMethod EarnedValueMethod { get; set; }
        /// <summary>
        /// Whether to calculate subtasks as summary tasks.
        /// </summary>
        // [DefaultValue(true)]
        [Range(0,1)]
        public int InsertedProjectsLikeSummary { get; set; }
        /// <summary>
        /// Whether multiple critical paths are calculated.
        /// </summary>
        // [DefaultValue(false)]
        [Range(0,1)]
        public int MultipleCriticalPaths { get; set; }
        /// <summary>
        /// Whether new tasks are effort driven.
        /// </summary>
        // [DefaultValue(true)]
        [Range(0,1)]
        public int NewTasksEffortDriven { get; set; }
        /// <summary>
        /// Whether to show the estimated duration by default.
        /// </summary>
        // [DefaultValue(true)]
        [Range(0,1)]
        public int NewTasksEstimated { get; set; }
        /// <summary>
        /// Whether in-progress tasks can be split.
        /// </summary>
        // [DefaultValue(true)]
        [Range(0,1)]
        public int SplitsInProgressTasks { get; set; }
        /// <summary>
        /// Whether actual costs are spread to the status date.
        /// </summary>
        // [DefaultValue(true)]
        [Range(0,1)]
        public int SpreadActualCost { get; set; }
        /// <summary>
        /// Whether percent complete is spread to the status date.
        /// </summary>
        // [DefaultValue(false)]
        [Range(0,1)]
        public int SpreadPercentComplete { get; set; }
        /// <summary>
        /// Whether updates to tasks update resources.
        /// </summary>
        [Range(0,1)]
        public int TaskUpdatesResource { get; set; }
        /// <summary>
        /// Whether to use fiscal year numbering.
        /// </summary>
        [Range(0,1)]
        public int FiscalYearStart { get; set; }
        /// <summary>
        /// Start day of the week. Values are: 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday.
        /// </summary>
        public ProjectWeekStartDay WeekStartDay { get; set; }
        /// <summary>
        /// Whether the end of completed portions of tasks scheduled to begin after the status date but begun early should be moved back to the status date.
        /// </summary>
        // [DefaultValue(false)]
        [Range(0,1)]
        public int MoveCompletedEndsBack { get; set; }
        /// <summary>
        /// Whether the beginning of remaining portions of tasks scheduled to begin after the status date but begun early should be moved back to the status date.
        /// </summary>
        // [DefaultValue(false)]
        [Range(0,1)]
        public int MoveRemainingStartsBack { get; set; }
        /// <summary>
        /// Whether the beginning of remaining portions of tasks scheduled to have begun late should be moved up to the status date.
        /// </summary>
        // [DefaultValue(false)]
        [Range(0,1)]
        public int MoveRemainingStartsForward { get; set; }
        /// <summary>
        /// Whether the end of completed portions of tasks scheduled to have been completed before the status date but begun late should be moved up to the status date.
        /// </summary>
        // [DefaultValue(false)]
        [Range(0,1)]
        public int MoveCompletedEndsForward { get; set; }
        /// <summary>
        /// The specific baseline used to calculate Variance values. Values are: 0=Baseline, 1=Baseline 1, 2=Baseline 2, 3=Baseline 3, 4=Baseline 4, 5=Baseline 5, 6=Baseline 6, 7=Baseline 7, 8=Baseline 8, 9=Baseline 9, 10=Baseline 10.
        /// </summary>
        public ProjectBaselineForEarnedValue BaselineForEarnedValue { get; set; }
        /// <summary>
        /// Whether to automatically add new resources to the resource pool.
        /// </summary>
        // [DefaultValue(true)]
        [Range(0,1)]
        public int AutoAddNewResourcesAndTasks { get; set; }
        /// <summary>
        /// Date used for calculation and reporting.
        /// </summary>
        public System.DateTime StatusDate { get; set; }
        /// <summary>
        /// The system date that the XML was generated.
        /// </summary>
        public System.DateTime CurrentDate { get; set; }
        /// <summary>
        /// Whether the project was created by a Project Server user as opposed to an NT user.
        /// </summary>
        [Range(0,1)]
        public int MicrosoftProjectServerURL { get; set; }
        /// <summary>
        /// Whether to autolink inserted or moved tasks.
        /// </summary>
        [Range(0,1)]
        public int Autolink { get; set; }
        /// <summary>
        /// The default date for new tasks start. Values are: 0=Project Start Date, 1=Current Date.
        /// </summary>
        public ProjectNewTaskStartDate NewTaskStartDate { get; set; }
        /// <summary>
        /// Whether or not new tasks should be made in Manual mode.
        /// </summary>
        [Range(0,1)]
        public int NewTasksAreManual { get; set; }
        /// <summary>
        /// The default earned value method for tasks. Values are: 0=Percent Complete, 1=Physical Percent Complete.
        /// </summary>
        public ProjectDefaultTaskEVMethod DefaultTaskEVMethod { get; set; }
        /// <summary>
        /// Whether the project XML was edited.
        /// </summary>
        [Range(0,1)]
        public int ProjectExternallyEdited { get; set; }
        /// <summary>
        /// Date used for calculation and reporting.
        /// </summary>
        public System.DateTime ExtendedCreationDate { get; set; }
        /// <summary>
        /// Whether all actual work has been synchronized with the project.
        /// </summary>
        [Range(0,1)]
        public int ActualsInSync { get; set; }
        /// <summary>
        /// Whether to remove all file properties on save.
        /// </summary>
        [Range(0,1)]
        public int RemoveFileProperties { get; set; }
        /// <summary>
        /// Whether the project is an administrative project.
        /// </summary>
        [Range(0,1)]
        public int AdminProject { get; set; }
        /// <summary>
        /// The name of the Baseline Calendar.
        /// </summary>
        public string BaslineCalendar { get; set; }
        /// <summary>
        /// Whether or not to update manually scheduled tasks when editing links.
        /// </summary>
        [Range(0,1)]
        public int UpdateManuallyScheduledTasksWhenEditingLinks { get; set; }
        /// <summary>
        /// Whether or not tasks moving from Manual to Auto Scheduled should be moved to the nearest working time.
        /// </summary>
        [Range(0,1)]
        public int KeepTaskOnNearestWorkingTimeWhenMadeAutoScheduled { get; set; }

        public int SprintLength { get; set; }
        public int AgileMode { get; set; }

        /// <summary>
        /// Project class constructor
        /// </summary>
        public Project()
        {
            ScheduleFromStart = 1;
            DefaultTaskType = ProjectDefaultTaskType.FixedDuration;
            EditableActualCosts = 0;
            HonorConstraints = 1;
            InsertedProjectsLikeSummary = 1;
            MultipleCriticalPaths = 0;
            NewTasksEffortDriven = 1;
            NewTasksEstimated = 1;
            SplitsInProgressTasks = 1;
            SpreadActualCost = 1;
            SpreadPercentComplete = 0;
            MoveCompletedEndsBack = 0;
            MoveRemainingStartsBack = 0;
            MoveRemainingStartsForward = 0;
            MoveCompletedEndsForward = 0;
            AutoAddNewResourcesAndTasks = 1;
        }

        /// <summary>
        /// The collection of views
        /// </summary>
        [XmlArrayItemAttribute("View", IsNullable = false)]
        public List<ProjectView> Views
        {
            get
            {
                if ((_views == null))
                {
                    _views = new List<ProjectView>();
                }
                return _views;
            }
            set
            {
                _views = value;
            }
        }

        /// <summary>
        /// The collection of filters
        /// </summary>
        [XmlArrayItemAttribute("Filter", IsNullable = false)]
        public List<ProjectFilter> Filters
        {
            get
            {
                if ((_filters == null))
                {
                    _filters = new List<ProjectFilter>();
                }
                return _filters;
            }
            set
            {
                _filters = value;
            }
        }

        /// <summary>
        /// The collection of groups
        /// </summary>
        [XmlArrayItemAttribute("Group", IsNullable = false)]
        public List<ProjectGroup> Groups
        {
            get
            {
                if ((_groups == null))
                {
                    _groups = new List<ProjectGroup>();
                }
                return _groups;
            }
            set
            {
                _groups = value;
            }
        }

        /// <summary>
        /// The collection of tables
        /// </summary>
        [XmlArrayItemAttribute("Table", IsNullable = false)]
        public List<ProjectTable> Tables
        {
            get
            {
                if ((_tables == null))
                {
                    _tables = new List<ProjectTable>();
                }
                return _tables;
            }
            set
            {
                _tables = value;
            }
        }

        /// <summary>
        /// The collection of reports
        /// </summary>
        [XmlArrayItemAttribute("Report", IsNullable = false)]
        public List<ProjectReport> Reports
        {
            get
            {
                if ((_reports == null))
                {
                    _reports = new List<ProjectReport>();
                }
                return _reports;
            }
            set
            {
                _reports = value;
            }
        }

        /// <summary>
        /// The collection of outline code definitions associated with the project. These codes may be associated only with this project, or may be common among several projects (enterprise codes).
        /// </summary>
        [XmlArrayItemAttribute("OutlineCode", IsNullable = false)]
        public List<ProjectOutlineCode> OutlineCodes
        {
            get
            {
                if ((_outlineCodes == null))
                {
                    _outlineCodes = new List<ProjectOutlineCode>();
                }
                return _outlineCodes;
            }
            set
            {
                _outlineCodes = value;
            }
        }

        /// <summary>
        /// The table of entries that define the outline code mask.
        /// </summary>
        public ProjectWBSMasks WBSMasks
        {
            get
            {
                if ((_wBSMasks == null))
                {
                    _wBSMasks = new ProjectWBSMasks();
                }
                return _wBSMasks;
            }
            set
            {
                _wBSMasks = value;
            }
        }

        /// <summary>
        /// The collection of extended attribute (custom field) definitions associated with the project.
        /// </summary>
        [XmlArrayItemAttribute("ExtendedAttribute", IsNullable = false)]
        public List<ProjectExtendedAttribute> ExtendedAttributes
        {
            get
            {
                if ((_extendedAttributes == null))
                {
                    _extendedAttributes = new List<ProjectExtendedAttribute>();
                }
                return _extendedAttributes;
            }
            set
            {
                _extendedAttributes = value;
            }
        }

        /// <summary>
        /// The collection of calendars that is associated with the project.
        /// </summary>
        [XmlArrayItemAttribute("Calendar", IsNullable = false)]
        public List<ProjectCalendar> Calendars
        {
            get
            {
                if ((_calendars == null))
                {
                    _calendars = new List<ProjectCalendar>();
                }
                return _calendars;
            }
            set
            {
                _calendars = value;
            }
        }

        /// <summary>
        /// The collection of tasks that make up the project.
        /// </summary>
        [XmlArrayItemAttribute("Task", IsNullable = false)]
        public List<ProjectTask> Tasks
        {
            get
            {
                if ((_tasks == null))
                {
                    _tasks = new List<ProjectTask>();
                }
                return _tasks;
            }
            set
            {
                _tasks = value;
            }
        }

        /// <summary>
        /// The collection of resources that make up the project.
        /// </summary>
        [XmlArrayItemAttribute("Resource", IsNullable = false)]
        public List<ProjectResource> Resources
        {
            get
            {
                if ((_resources == null))
                {
                    _resources = new List<ProjectResource>();
                }
                return _resources;
            }
            set
            {
                _resources = value;
            }
        }

        /// <summary>
        /// The collection of assignments that make up the project.
        /// </summary>
        [XmlArrayItemAttribute("Assignment", IsNullable = false)]
        public List<ProjectAssignment> Assignments
        {
            get
            {
                if ((_assignments == null))
                {
                    _assignments = new List<ProjectAssignment>();
                }
                return _assignments;
            }
            set
            {
                _assignments = value;
            }
        }

        /// <summary>
        /// The collection of board columns that make up the project.
        /// </summary>
        [XmlArrayItemAttribute("BoardColumn", IsNullable = false)]
        public List<ProjectBoardColumn> BoardColumns
        {
            get
            {
                if ((_boardColumns == null))
                {
                    _boardColumns = new List<ProjectBoardColumn>();
                }
                return _boardColumns;
            }
            set
            {
                _boardColumns = value;
            }
        }

        /// <summary>
        /// The collection of sprints that make up the project.
        /// </summary>
        [XmlArrayItemAttribute("Sprint", IsNullable = false)]
        public List<ProjectSprint> Sprints
        {
            get
            {
                if ((_sprints == null))
                {
                    _sprints = new List<ProjectSprint>();
                }
                return _sprints;
            }
            set
            {
                _sprints = value;
            }
        }

        private static XmlSerializer SerializerXML
        {
            get
            {
                if ((_serializer == null))
                {
                    _serializer = new XmlSerializerFactory().CreateSerializer(typeof(Project));
                }
                return _serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serialize Project object
        /// </summary>
        /// <returns>XML value</returns>
        public virtual string Serialize()
        {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try
            {
                memoryStream = new MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                SerializerXML.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes Project object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Project object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Project obj, out Exception exception)
        {
            exception = null;
            obj = default(Project);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Project obj)
        {
            Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Project Deserialize(string input)
        {
            StringReader stringReader = null;
            try
            {
                stringReader = new StringReader(input);
                return ((Project)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Project Deserialize(Stream s)
        {
            return ((Project)(SerializerXML.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Project object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            StreamWriter streamWriter = null;
            try
            {
                string dataString = Serialize();
                FileInfo outputFile = new FileInfo(fileName);
                streamWriter = outputFile.CreateText();
                streamWriter.WriteLine(dataString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Project object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Project object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Project obj, out Exception exception)
        {
            exception = null;
            obj = default(Project);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Project obj)
        {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Project LoadFromFile(string fileName)
        {
            FileStream file = null;
            StreamReader sr = null;
            try
            {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string dataString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(dataString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
